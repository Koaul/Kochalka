{"version":3,"sources":["actions/actions.js","components/Roll/RollButton/RollButton.jsx","components/Roll/RollValue/RollValue.jsx","components/Roll/DoneButton/DoneButton.jsx","components/Roll/RollDiv/RollDiv.jsx","components/UserInfo/ClearButton/ClearButton.jsx","components/UserInfo/UserInfo.jsx","components/Header/ChangeType/ChangeType.jsx","components/Header/Header.jsx","components/EnterName/EnterName.jsx","components/App/App.jsx","serviceWorker.js","reducers/index.js","store/store.js","index.js"],"names":["actions","Roll","createAction","Math","floor","random","Done","Clear","SetName","ChangeType","Button","styled","button","_templateObject","props","Type","connect","state","RollClick","Actions","_ref","react_default","a","createElement","onClick","Value","DoneButton_templateObject","DoneClicked","DoneClick","DoneButton_Button","RollDivStyled","div","RollDiv_templateObject","RollDiv","Roll_RollValue_RollValue","Roll_RollButton_RollButton","Roll_DoneButton_DoneButton","ClearButton_templateObject","ClearClick","ClearButton_Button","UI","UserInfo_templateObject","type","InfoHead","h3","_templateObject2","PushUps","SitUps","Squats","Name","Quantity","Record","UserInfo_ClearButton_ClearButton","ChangeType_templateObject","ButtonDiv","ChangeType_templateObject2","ChangeType_Button","Head","header","Header_templateObject","Header_ChangeType_ChangeType","Form","form","EnterName_templateObject","EnterName_templateObject2","Input","input","_templateObject3","EnterName","value","handleChange","e","_this","setState","target","handleSubmit","trim","preventDefault","this","onSubmit","onChange","EnterName_Button","React","Component","BDiv","App_templateObject","Div","App_templateObject2","App","components_EnterName_EnterName","components_Header_Header","Roll_RollDiv_RollDiv","components_UserInfo_UserInfo","Boolean","window","location","hostname","match","initialState","localStorage","JSON","parse","handleActions","action","Object","objectSpread","payload","newObj","stringify","store","createStore","reducers","ReactDOM","render","es","components_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01b3fa01.chunk.js","sourcesContent":["import { createAction } from 'redux-actions'\r\n\r\nconst Roll = createAction('Roll', () => Math.floor(Math.random()*100))\r\nconst Done = createAction('Done')\r\nconst Clear = createAction('Clear')\r\nconst SetName = createAction('SetName')\r\nconst ChangeType = createAction('ChangeType')\r\n\r\nexport default {\r\n    Roll,\r\n    Done,\r\n    Clear,\r\n    SetName,\r\n    ChangeType\r\n}","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { connect } from 'react-redux';\r\nimport Actions from '../../../actions/actions'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = styled.button`\r\n    border: 1px solid ${props => {\r\n        switch(props.Type){\r\n            case 'PushUps':\r\n                return 'rgb(66, 176, 244)'\r\n            case 'SitUps':\r\n                return 'rgb(101, 244, 66)'\r\n            case 'Squats':\r\n                return 'rgb(214, 167, 0)'\r\n            default:\r\n                return 'black'\r\n        }}\r\n    };\r\n    background-color: white;\r\n    font-size:36px;\r\n    margin:50px;\r\n`\r\n\r\nconst RollButton = ({RollClick, Type}) => (<Button Type={Type} onClick={RollClick}>ROLL</Button>)\r\n\r\nRollButton.propTypes = {\r\n    Type: PropTypes.string,\r\n    RollClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        Type: state.Type\r\n    }),\r\n    {\r\n        RollClick: Actions.Roll\r\n    }\r\n)(RollButton);","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst RollValue = ({Value, Type}) => (\r\n    <div>\r\n        {Type}: {Value}\r\n    </div>\r\n)\r\n\r\nRollValue.propTypes = {\r\n    Value: PropTypes.number,\r\n    Type: PropTypes.string\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        Value: state.Value,\r\n        Type: state.Type\r\n    })\r\n) (RollValue)\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {connect} from 'react-redux'\r\nimport Actions from '../../../actions/actions'\r\n\r\nconst Button = styled.button`\r\n    border: 1px solid ${props => {\r\n        switch(props.Type){\r\n            case 'PushUps':\r\n                return 'rgb(66, 176, 244)'\r\n            case 'SitUps':\r\n                return 'rgb(101, 244, 66)'\r\n            case 'Squats':\r\n                return 'rgb(214, 167, 0)'\r\n            default:\r\n                return 'black'\r\n        }}\r\n    };\r\n    background-color: white;\r\n    font-size:28px;\r\n    display:${props => props.DoneClicked ? \"none\" : \"block\"};\r\n`\r\n\r\nconst DoneButton = ({DoneClick, DoneClicked, Type}) => (\r\n    <Button Type={Type} DoneClicked={DoneClicked} onClick={()=>DoneClick()}>Done</Button>\r\n)\r\n\r\n\r\n\r\nexport default connect(\r\n    state => ({\r\n        Type: state.Type,\r\n        DoneClicked: state.DoneClicked\r\n    }),\r\n    {\r\n        DoneClick: Actions.Done,\r\n    }\r\n)(DoneButton);","import React from 'react'\r\nimport RB from '../RollButton/RollButton'\r\nimport RV from '../RollValue/RollValue'\r\nimport DB from '../DoneButton/DoneButton'\r\nimport styled from 'styled-components'\r\n\r\nconst RollDivStyled = styled.div`\r\n    width:85vw;\r\n    height:90vh;\r\n    display:flex;\r\n    flex-direction:column;\r\n    justify-content:center;\r\n    align-items:center;\r\n`\r\n\r\nconst RollDiv = () => (\r\n    <RollDivStyled>\r\n        <RV/>\r\n        <RB/>\r\n        <DB/>\r\n    </RollDivStyled>\r\n)\r\n\r\nexport default RollDiv","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport PropTypes from 'prop-types'\r\nimport Actions from '../../../actions/actions'\r\nimport {connect} from 'react-redux'\r\n\r\nconst Button = styled.button`\r\n    border: 1px solid ${props => {\r\n        switch(props.Type){\r\n            case 'PushUps':\r\n                return 'rgb(66, 176, 244)'\r\n            case 'SitUps':\r\n                return 'rgb(101, 244, 66)'\r\n            case 'Squats':\r\n                return 'rgb(214, 167, 0)'\r\n            default:\r\n                return 'black'\r\n        }}\r\n    };\r\n    font-size:36px;\r\n    margin:50px;\r\n    background-color:white;\r\n`\r\n\r\nconst ClearButton = ({Type, ClearClick}) => (\r\n    <Button Type={Type} onClick={() => ClearClick()}>Clear</Button>\r\n)\r\n\r\nClearButton.propTypes = {\r\n    Type: PropTypes.string,\r\n    ClearClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        Type: state.Type\r\n    }),\r\n    {\r\n        ClearClick: Actions.Clear\r\n    }\r\n)(ClearButton)","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport CB from './ClearButton/ClearButton'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst UI = styled.div`\r\n    height:90vh;\r\n    width:15vw;\r\n    display:flex;\r\n    flex-direction:column;\r\n    padding:10px;\r\n    font-size:24px;\r\n    border: ${props => {\r\n        switch(props.type){\r\n            case 'PushUps':\r\n                return '1px solid rgb(66, 176, 244)'\r\n            case 'SitUps':\r\n                return '1px solid rgb(101, 244, 66)'\r\n            case 'Squats':\r\n                return '1px solid rgb(214, 167, 0)'\r\n            default:\r\n                return '1px solid black'\r\n        }\r\n    }};\r\n`\r\nconst InfoHead = styled.h3`\r\n    color: ${props => {\r\n        switch(props.type){\r\n            case 'PushUps':\r\n                return 'rgb(66, 176, 244)'\r\n            case 'SitUps':\r\n                return 'rgb(101, 244, 66)'\r\n            case 'Squats':\r\n                return 'rgb(214, 167, 0)'\r\n            default:\r\n                return 'black'\r\n        }\r\n    }};\r\n    margin-bottom: 0px;\r\n`\r\n\r\n\r\nconst UserInfo = ({PushUps, SitUps, Squats, ClearClick, Name, Type}) => (\r\n    <UI type={Type}>\r\n        <span>Name: {Name}</span>\r\n        <InfoHead type='PushUps'>PushUps</InfoHead>\r\n            <span>Push Ups quantity: {PushUps.Quantity} </span>\r\n            <span>Record: {PushUps.Record} </span>\r\n        <InfoHead type='SitUps'>SitUps</InfoHead>\r\n            <span>Sit Ups quantity: {SitUps.Quantity} </span>\r\n            <span>Record: {SitUps.Record} </span>\r\n        <InfoHead type='Squats'>Squats</InfoHead>\r\n            <span>Squats quantity: {Squats.Quantity} </span>\r\n            <span>Record: {Squats.Record} </span>\r\n        <CB/>\r\n    </UI>\r\n)\r\n\r\nUserInfo.propTypes = {\r\n    PushUps: PropTypes.object,\r\n    SitUps: PropTypes.object,\r\n    Squats: PropTypes.object,\r\n    Name: PropTypes.string,\r\n    Type: PropTypes.string\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        PushUps: state[\"PushUps\"],\r\n        SitUps: state[\"SitUps\"],\r\n        Squats: state[\"Squats\"],\r\n        Name: state.Name,\r\n        Type: state.Type\r\n    })\r\n)(UserInfo)","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport Actions from '../../../actions/actions'\r\nimport styled from 'styled-components'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = styled.button`\r\n    height:50px;\r\n    font-size:36px;\r\n    border: 1px solid black;\r\n    background-color: rgba(0,0,0,0);\r\n    color:white;\r\n`\r\n\r\nconst ButtonDiv = styled.div`\r\n    display:flex;\r\n    width:600px;\r\n    flex-direction:row;\r\n    justify-content:space-between;\r\n    margin-right:50px;\r\n    box-sizing:border-box;\r\n`\r\n\r\nconst ChangeType = ({ChangeType}) => (\r\n    <ButtonDiv>\r\n        <Button onClick={()=>ChangeType(\"PushUps\")}>PushUps</Button>\r\n        <Button onClick={()=>ChangeType(\"SitUps\")}>SitUps</Button>\r\n        <Button onClick={()=>ChangeType(\"Squats\")}>Squats</Button>\r\n    </ButtonDiv>\r\n)\r\n\r\nChangeType.propTypes = {\r\n    ChangeType: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(\r\n    null,\r\n    {\r\n        ChangeType: Actions.ChangeType\r\n    }\r\n)(ChangeType)","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport CT from './ChangeType/ChangeType'\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Head = styled.header`\r\nwidth:100vw;\r\nheight:80px;\r\nbackground-color:${props => {\r\n    switch(props.Type){\r\n        case 'PushUps':\r\n            return 'rgb(66, 176, 244)'\r\n        case 'SitUps':\r\n            return 'rgb(101, 244, 66)'\r\n        case 'Squats':\r\n            return 'rgb(214, 167, 0)'\r\n        default:\r\n            return 'black'\r\n    }}\r\n};\r\nfont-size: 48px;\r\ncolor: white;\r\ndisplay:flex;\r\nflex-direction:row;\r\nalign-items:center;\r\njustify-content:space-between;\r\npadding-left:50px;\r\nbox-sizing:border-box;\r\n`\r\nconst Header = ({Type}) => (\r\n    <Head Type={Type}>\r\n        <span>Kochalka</span>\r\n        <CT/>\r\n    </Head>\r\n)\r\n\r\nHeader.propTypes = {\r\n    Type: PropTypes.string\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        Type: state.Type\r\n    })\r\n)(Header)","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport {connect} from 'react-redux'\r\nimport Actions from '../../actions/actions'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Form = styled.form`\r\n    display:flex;\r\n    flex-direction: column;\r\n    align-items:center;\r\n    justify-content:space-around;\r\n    position: absolute;\r\n    width:500px;\r\n    height:250px;\r\n    background-color:rgb(66, 176, 244);\r\n    border: 1px solid black;\r\n    color: white;\r\n    font-size:54px;\r\n    visibility: ${props => props.Name ? 'hidden' : 'visible' };\r\n    background-color: ${props => {\r\n        switch(props.Type){\r\n            case 'PushUps':\r\n                return 'rgb(66, 176, 244)'\r\n            case 'SitUps':\r\n                return 'rgb(101, 244, 66)'\r\n            case 'Squats':\r\n                return 'rgb(214, 167, 0)'\r\n            default:\r\n                return 'black'\r\n        }}\r\n    };\r\n`\r\n\r\nconst Button = styled.button`\r\n    background-color: white;\r\n    border: 1px solid black;\r\n    font-size:36px;\r\n`\r\n\r\nconst Input = styled.input`\r\n    width:250px;\r\n    height:50px;\r\n    font-size:54px;\r\n`\r\n\r\nclass EnterName extends React.Component{\r\n    state = { value:\"\" }\r\n    handleChange = (e) => { this.setState({value:e.target.value}) }\r\n\r\n    handleSubmit = (e) => {\r\n        this.props.SetName(this.state.value.trim());\r\n        this.setState({value:\"\"});\r\n        e.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Form Type={this.props.Type} Name={this.props.Name} onSubmit={this.handleSubmit}>\r\n                <span>Enter Your Name</span>\r\n                <Input onChange={this.handleChange} value={ this.state.value }/>\r\n                <Button type=\"Submit\">Enter</Button>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nEnterName.propTypes = {\r\n    Name: PropTypes.string,\r\n    Type: PropTypes.string,\r\n    SetName: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        Name: state.Name,\r\n        Type: state.Type\r\n    }),\r\n    {\r\n        SetName: Actions.SetName\r\n    }\r\n) (EnterName)","import React from 'react'\r\nimport RD from '../Roll/RollDiv/RollDiv'\r\nimport styled from 'styled-components'\r\nimport UI from '../UserInfo/UserInfo'\r\nimport Header from '../Header/Header'\r\nimport EN from '../EnterName/EnterName'\r\n\r\nconst BDiv = styled.div`\r\n    margin:0;\r\n    padding:0;\r\n    width:100vw;\r\n    height:100vh;\r\n    display:flex;\r\n    flex-direction:column;\r\n    justify-content:center;\r\n    align-items:center;\r\n    font-size: 36px;\r\n`\r\nconst Div = styled.div`\r\n    display:flex;\r\n    flex-direction:row;\r\n    align-items:center;\r\n    justify-content:center;\r\n    width:100vw;\r\n`\r\n\r\n\r\nconst App = () => (\r\n    <BDiv>\r\n        <EN/>\r\n        <Header/>\r\n        <Div>\r\n            <RD/>\r\n            <UI/>\r\n        </Div>\r\n    </BDiv>\r\n)\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { handleActions } from 'redux-actions'\r\n\r\nlet initialState\r\n\r\nif(localStorage['Sport']) {\r\n    initialState = JSON.parse(localStorage['Sport'])\r\n} else {\r\n    initialState = {\r\n        PushUps: {\r\n            Record: 0,\r\n            Quantity: 0\r\n        },\r\n        SitUps: {\r\n            Record: 0,\r\n            Quantity: 0\r\n        },\r\n        Squats: {\r\n            Record: 0,\r\n            Quantity: 0\r\n        },\r\n        Name: \"\",\r\n        Value: 0,\r\n        Type: \"Squats\",\r\n        DoneClicked: true\r\n   }\r\n}\r\n\r\nexport default handleActions(\r\n    {\r\n        'Roll': (state, action) => ({\r\n            ...state,\r\n            Value: action.payload,\r\n            DoneClicked: false\r\n        }),\r\n  \r\n        'Done': (state, action) => {\r\n            let type = state[state.Type]\r\n            let newObj = {...state}\r\n            newObj[state.Type] = {\r\n                ...type,\r\n                Quantity: type.Quantity+state.Value,\r\n                Record: state.Value>type.Record ? state.Value : type.Record\r\n            }\r\n            newObj['DoneClicked'] = true\r\n            newObj['Value'] = 0\r\n            localStorage['Sport'] = JSON.stringify(newObj)\r\n            return newObj\r\n        },\r\n\r\n        'Clear': (state, action) => {\r\n            delete localStorage['Sport']\r\n\r\n            return {\r\n                ...state,\r\n                PushUps: {\r\n                    Quantity: 0,\r\n                    Record: 0\r\n                },\r\n                SitUps: {\r\n                    Quantity: 0,\r\n                    Record: 0\r\n                },\r\n                Squats: {\r\n                    Quantity: 0,\r\n                    Record: 0\r\n                },\r\n                Value: 0,\r\n                Name: \"\"\r\n            }\r\n        },\r\n        'SetName': (state, action) => ({\r\n                ...state,\r\n                Name: action.payload\r\n        }),\r\n        \r\n        'ChangeType': (state, action) => ({\r\n            ...state,\r\n            Type: action.payload,\r\n            Value: 0,\r\n            DoneClicked: true\r\n        })\r\n    },\r\n    initialState\r\n)\r\n","import reducers from '../reducers/index.js'\r\nimport {createStore} from 'redux'\r\n\r\nconst store = createStore(\r\n    reducers\r\n)\r\n\r\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App/App'\nimport {Provider} from 'react-redux'\nimport * as serviceWorker from './serviceWorker'\nimport store from './store/store'\n\nReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        document.getElementById('root')\n    )\n\nserviceWorker.unregister()\n"],"sourceRoot":""}